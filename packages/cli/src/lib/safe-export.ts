import { writeFile, stat } from "fs/promises";
import { formatBytes } from "./ui.js";

const sanitizeCell = (value: unknown): string => {
  if (value === null || value === undefined) return "";
  
  const str = String(value).replace(/"/g, '""');
  
  // Prevent CSV injection attacks
  const dangerousStart = /^[=\-+@]/.test(str) || str.includes("\t");
  const sanitized = dangerousStart ? `'${str}` : str;
  
  // Quote if contains commas, quotes, or newlines
  if (/[",\n\r]/.test(sanitized)) {
    return `"${sanitized}"`;
  }
  
  return sanitized;
};

export interface ExportMetadata {
  generated_by: string;
  generated_at: string;
  version: string;
  total_records?: number;
  data_source?: string;
  filters_applied?: string[];
}

export interface ExportSummary {
  file_path: string;
  file_size: string;
  record_count?: number;
  format: string;
}

export const exportToCsv = async (
  data: Record<string, unknown>[],
  filePath: string,
  metadata: ExportMetadata
): Promise<void> => {
  if (!data.length) throw new Error("No data to export");
  
  // Get union of all keys from all records
  const allKeys = Array.from(
    data.reduce((keys, record) => {
      Object.keys(record).forEach(key => keys.add(key));
      return keys;
    }, new Set<string>())
  );
  
  const lines: string[] = [];
  
  // Add metadata header
  lines.push(`# Generated by: ${metadata.generated_by}`);
  lines.push(`# Generated at: ${metadata.generated_at}`);
  lines.push(`# Version: ${metadata.version}`);
  lines.push(`# Total records: ${data.length}`);
  if (metadata.data_source) {
    lines.push(`# Data source: ${metadata.data_source}`);
  }
  if (metadata.filters_applied?.length) {
    lines.push(`# Filters: ${metadata.filters_applied.join(", ")}`);
  }
  lines.push("#");
  
  // Add CSV header
  lines.push(allKeys.join(","));
  
  // Add data rows
  data.forEach(record => {
    const row = allKeys.map(key => sanitizeCell(record[key]));
    lines.push(row.join(","));
  });
  
  await writeFile(filePath, lines.join("\n"), "utf8");
};

export const exportToJson = async (
  data: unknown,
  filePath: string,
  metadata: ExportMetadata
): Promise<void> => {
  const exportData = {
    metadata,
    data
  };
  
  await writeFile(filePath, JSON.stringify(exportData, null, 2), "utf8");
};

export const getExportSummary = async (filePath: string): Promise<ExportSummary> => {
  const stats = await stat(filePath);
  const extension = filePath.slice(filePath.lastIndexOf(".")).toLowerCase();
  
  return {
    file_path: filePath,
    file_size: formatBytes(stats.size),
    format: extension.replace(".", "").toUpperCase()
  };
};