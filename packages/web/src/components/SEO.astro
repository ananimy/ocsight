---
import { generateStructuredData } from '../lib/structured-data'

export interface OpenGraphData {
  title?: string
  description?: string
  type?: 'website' | 'article' | 'profile'
  image?: string
  imageAlt?: string
  url?: string
  siteName?: string
  locale?: string
}

export interface TwitterCardData {
  card?: 'summary' | 'summary_large_image' | 'app' | 'player'
  site?: string
  creator?: string
  title?: string
  description?: string
  image?: string
  imageAlt?: string
}

export interface SEOProps {
  title: string
  description: string
  canonical?: string
  noindex?: boolean
  nofollow?: boolean
  openGraph?: OpenGraphData
  twitter?: TwitterCardData
  structuredData?: object
  keywords?: string[]
  author?: string
  publishDate?: Date
  modifiedDate?: Date
  articleSection?: string
  articleTags?: string[]
}

const {
  title,
  description,
  canonical,
  noindex = false,
  nofollow = false,
  openGraph = {},
  twitter = {},
  structuredData,
  keywords = [],
  author = 'ocsight team',
  publishDate,
  modifiedDate,
  articleSection,
  articleTags = []
} = Astro.props

// Generate canonical URL
const canonicalUrl = canonical || new URL(Astro.url.pathname, Astro.site).href

// Default Open Graph data
const ogData: OpenGraphData = {
  title: title,
  description: description,
  type: 'website',
  url: canonicalUrl,
  siteName: 'ocsight',
  locale: 'en_US',
  image: new URL('/logo.svg', Astro.site).href,
  imageAlt: 'ocsight logo',
  ...openGraph
}

// Default Twitter Card data
const twitterData: TwitterCardData = {
  card: 'summary_large_image',
  site: '@ocsight',
  creator: '@ocsight',
  title: title,
  description: description,
  image: ogData.image,
  imageAlt: ogData.imageAlt,
  ...twitter
}

// Generate robots meta content
const robotsContent = [
  noindex ? 'noindex' : 'index',
  nofollow ? 'nofollow' : 'follow'
].join(', ')

// Generate structured data
const defaultStructuredData = generateStructuredData({
  type: 'WebPage',
  title,
  description,
  url: canonicalUrl,
  author,
  publishDate,
  modifiedDate,
  articleSection,
  articleTags
})

const finalStructuredData = structuredData || defaultStructuredData
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content={author} />
{keywords.length > 0 && <meta name="keywords" content={keywords.join(', ')} />}

<!-- Canonical URL -->
<link rel="canonical" href={canonicalUrl} />

<!-- Robots -->
<meta name="robots" content={robotsContent} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={ogData.type} />
<meta property="og:url" content={ogData.url} />
<meta property="og:title" content={ogData.title} />
<meta property="og:description" content={ogData.description} />
<meta property="og:image" content={ogData.image} />
<meta property="og:image:alt" content={ogData.imageAlt} />
<meta property="og:site_name" content={ogData.siteName} />
<meta property="og:locale" content={ogData.locale} />

<!-- Twitter -->
<meta property="twitter:card" content={twitterData.card} />
<meta property="twitter:url" content={ogData.url} />
<meta property="twitter:title" content={twitterData.title} />
<meta property="twitter:description" content={twitterData.description} />
<meta property="twitter:image" content={twitterData.image} />
<meta property="twitter:image:alt" content={twitterData.imageAlt} />
{twitterData.site && <meta property="twitter:site" content={twitterData.site} />}
{twitterData.creator && <meta property="twitter:creator" content={twitterData.creator} />}

<!-- Article specific meta tags -->
{publishDate && <meta property="article:published_time" content={publishDate.toISOString()} />}
{modifiedDate && <meta property="article:modified_time" content={modifiedDate.toISOString()} />}
{articleSection && <meta property="article:section" content={articleSection} />}
{articleTags.map((tag: string) => <meta property="article:tag" content={tag} />)}

<!-- Additional SEO meta tags -->
<meta name="format-detection" content="telephone=no" />
<meta name="theme-color" content="#000000" />
<meta name="color-scheme" content="light dark" />

<!-- Structured Data -->
{finalStructuredData && (
  <script type="application/ld+json" set:html={JSON.stringify(finalStructuredData)} />
)}

<!-- Preconnect to external domains for performance -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

<!-- DNS prefetch for external resources -->
<link rel="dns-prefetch" href="//github.com" />
<link rel="dns-prefetch" href="//api.github.com" />

<!-- Favicon and app icons -->
<link rel="icon" type="image/svg+xml" href="/logo.svg" />
<link rel="apple-touch-icon" href="/logo.svg" />

<!-- Manifest for PWA -->
<link rel="manifest" href="/manifest.json" />

<!-- Security headers via meta tags -->
<meta http-equiv="X-Content-Type-Options" content="nosniff" />
<meta http-equiv="X-XSS-Protection" content="1; mode=block" />
<meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />

<!-- Performance hints -->
<meta http-equiv="Accept-CH" content="DPR, Viewport-Width, Width" />

<!-- Language and region -->
<meta http-equiv="Content-Language" content="en" />

<!-- Cache control for static assets -->
<meta http-equiv="Cache-Control" content="public, max-age=31536000, immutable" />

<style>
  /* Critical CSS for above-the-fold content */
  html {
    font-family: ui-monospace, SFMono-Regular, "SF Mono", Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  }
  
  body {
    margin: 0;
    padding: 0;
    background-color: rgb(var(--color-background, 255 255 255));
    color: rgb(var(--color-foreground, 0 0 0));
  }
</style>